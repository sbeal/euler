# Steve Beal
# Project Euler problem 12 solution
# 2/4/14

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1+2+3+4+5+6+7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
# We can see that 28 is the first triangle number with over five divisors.
# What is the value of the first triangle number to have over
# five hundred divisors?

# this algorithm is based on the idea that a natural number n of the form
# n = p^a, where p is a prime number, has a+1 divisors: 1, p, p^2, ..., p^a
# this can be extended to multiplying together the number of divisors for each
# prime factor of n.

from utils import prime_factorize
    
def first_triangle_with_n_divisors(n):
    cur_tri_val = old_tri_val = 1
    i = 2
    num_divs = 1

    while num_divs < n:
        cur_tri_val = old_tri_val + i
        prime_factors = prime_factorize(cur_tri_val)
        num_divs = 1
        for f in prime_factors:
            num_divs = num_divs * (f[1] + 1)
        old_tri_val = cur_tri_val
        i += 1
    return cur_tri_val

print(first_triangle_with_n_divisors(500))